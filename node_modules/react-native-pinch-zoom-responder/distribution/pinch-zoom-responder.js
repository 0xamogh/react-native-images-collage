'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PinchZoomResponder = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _MatrixMath = require('react-native/Libraries/Utilities/MatrixMath');

var _MatrixMath2 = _interopRequireDefault(_MatrixMath);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var PinchZoomResponder = exports.PinchZoomResponder = function () {
  function PinchZoomResponder(responders) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck(this, PinchZoomResponder);

    this.responders = responders;
    this.transformX = typeof options.transformX === 'undefined' ? true : options.transformX;
    this.transformY = typeof options.transformY === 'undefined' ? true : options.transformY;
    this.handlers = {
      onStartShouldSetResponder: this.onStartShouldSetResponder.bind(this),
      onMoveShouldSetResponder: this.onMoveShouldSetResponder.bind(this),
      onStartShouldSetResponderCapture: this.onStartShouldSetResponderCapture.bind(this),
      onMoveShouldSetResponderCapture: this.onMoveShouldSetResponderCapture.bind(this),
      onResponderGrant: this.onResponderGrant.bind(this),
      onResponderMove: this.onResponderMove.bind(this),
      onResponderReject: this.onResponderReject.bind(this),
      onResponderRelease: this.onResponderRelease.bind(this),
      onResponderTerminate: this.onResponderTerminate.bind(this),
      onResponderTerminationRequest: this.onResponderTerminationRequest.bind(this)
    };
    this.touches = {};
    this.transform = _MatrixMath2.default.createIdentityMatrix();
    this.tempTransformMatrix = _MatrixMath2.default.createIdentityMatrix();
  }

  _createClass(PinchZoomResponder, [{
    key: 'onStartShouldSetResponder',
    value: function onStartShouldSetResponder() {
      /* console.log('start should set'); */return true;
    }
  }, {
    key: 'onMoveShouldSetResponder',
    value: function onMoveShouldSetResponder() {
      /* console.log('move should set'); */return true;
    }
  }, {
    key: 'onStartShouldSetResponderCapture',
    value: function onStartShouldSetResponderCapture() {
      /* console.log('start set capture'); */return true;
    }
  }, {
    key: 'onMoveShouldSetResponderCapture',
    value: function onMoveShouldSetResponderCapture() {
      /* console.log('move set capture'); */return true;
    }
  }, {
    key: 'onResponderReject',
    value: function onResponderReject(e) {/* console.log('reject') */}
  }, {
    key: 'onResponderTerminationRequest',
    value: function onResponderTerminationRequest() {
      /* console.log('terminate request'); */return false;
    }
  }, {
    key: 'storeOriginalTouches',
    value: function storeOriginalTouches(touches) {
      var _this = this;

      touches.forEach(function (touch) {
        if (!_this.touches[touch.identifier]) {
          _this.touches[touch.identifier] = touch;
        }
        if (!touch.touches) {
          return;
        }
        touch.touches.forEach(function (secondaryTouch) {
          if (secondaryTouch.identifier !== touch.identifier && !_this.touches[secondaryTouch.identifier]) {
            _this.touches[secondaryTouch.identifier] = secondaryTouch;
          }
        });
      });
    }
  }, {
    key: 'clearOldTouches',
    value: function clearOldTouches(touches) {
      for (var key in this.touches) {
        var found = false;
        for (var i in touches) {
          if (touches[i].identifier == key) {
            found = true;
          }
        }
        if (!found) {
          delete this.touches[key];
        }
      }
    }
  }, {
    key: 'onResponderGrant',
    value: function onResponderGrant(e) {
      this.updateTouchState(e);
    }
  }, {
    key: 'updateTouchState',
    value: function updateTouchState(e) {
      var oldTouchCount = Object.keys(this.touches).length;
      this.clearOldTouches(e.nativeEvent.touches);
      this.storeOriginalTouches(e.nativeEvent.touches);
      var newTouchCount = Object.keys(this.touches).length;
      if (oldTouchCount < 2 && newTouchCount >= 2) {
        this.onPinchZoomStart(e);
      } else if (oldTouchCount >= 2 && newTouchCount < 2) {
        this.onPinchZoomEnd(e);
      }
      if (newTouchCount < 2) {
        this.touches = {};
      }
      this.storeCenter(e);
    }
  }, {
    key: 'onResponderMove',
    value: function onResponderMove(e) {
      this.updateTouchState(e);
      if (e.nativeEvent.touches.length === 2) {
        var gestureState = this.gestureState(e);
      }
      if (this.responders.onResponderMove) {
        return this.responders.onResponderMove(e, gestureState);
      }
    }
  }, {
    key: 'onPinchZoomStart',
    value: function onPinchZoomStart(e) {
      if (this.responders.onPinchZoomStart) {
        return this.responders.onPinchZoomStart(e);
      }
    }
  }, {
    key: 'onPinchZoomEnd',
    value: function onPinchZoomEnd(e) {
      if (this.responders.onPinchZoomEnd) {
        return this.responders.onPinchZoomEnd(e);
      }
    }
  }, {
    key: 'onResponderRelease',
    value: function onResponderRelease(e) {
      this.updateTouchState(e);
    }
  }, {
    key: 'onResponderTerminate',
    value: function onResponderTerminate(e) {}
  }, {
    key: 'storeCenter',
    value: function storeCenter(e) {
      this.scaleCenterX = this.center(e.nativeEvent, 'locationX');
      this.scaleCenterY = this.center(e.nativeEvent, 'locationY');
    }
  }, {
    key: 'gestureState',
    value: function gestureState(e) {
      this.reuseIdentityMatrix(this.transform);
      var transform = this.transform;

      var scaleX = 1;
      var dx = 0;
      var cx = 0;

      if (this.transformX) {
        scaleX = this.scale(e.nativeEvent, 'locationX');
        dx = this.delta(e.nativeEvent, 'locationX');
        cx = this.scaleCenterX;
      }

      var scaleY = 1;
      var dy = 0;
      var cy = 0;

      if (this.transformY) {
        scaleY = this.scale(e.nativeEvent, 'locationY');
        dy = this.delta(e.nativeEvent, 'locationY');
        cy = this.scaleCenterY;
      }

      this.reuseIdentityMatrix(this.tempTransformMatrix);
      _MatrixMath2.default.reuseTranslate2dCommand(this.tempTransformMatrix, dx, dy);
      _MatrixMath2.default.multiplyInto(transform, this.tempTransformMatrix, transform);

      this.reuseIdentityMatrix(this.tempTransformMatrix);
      _MatrixMath2.default.reuseTranslate2dCommand(this.tempTransformMatrix, -cx, -cy);
      _MatrixMath2.default.multiplyInto(transform, this.tempTransformMatrix, transform);

      this.reuseIdentityMatrix(this.tempTransformMatrix);
      _MatrixMath2.default.reuseScale3dCommand(this.tempTransformMatrix, scaleX, scaleY, 1);
      _MatrixMath2.default.multiplyInto(transform, this.tempTransformMatrix, transform);

      this.reuseIdentityMatrix(this.tempTransformMatrix);
      _MatrixMath2.default.reuseTranslate2dCommand(this.tempTransformMatrix, cx, cy);
      _MatrixMath2.default.multiplyInto(transform, this.tempTransformMatrix, transform);

      return {
        transform: transform, cx: cx, cy: cy, scaleX: scaleX, scaleY: scaleY, dx: dx, dy: dy
      };
    }
  }, {
    key: 'delta',
    value: function delta(nativeEvent, field) {
      var _this2 = this;

      return nativeEvent.touches.reduce(function (totalDelta, touch) {
        return totalDelta + (touch[field] - _this2.touches[touch.identifier][field]);
      }, 0) / nativeEvent.touches.length;
    }
  }, {
    key: 'scale',
    value: function scale(nativeEvent, field) {
      var spread = this.spread(nativeEvent, field);
      var startSpread = this.startSpread(nativeEvent, field);
      if (startSpread === 0) {
        var _scale = 1;
      } else {
        _scale = spread / (this.startSpread(nativeEvent, field) * 1.0);
      }
      return _scale;
    }
  }, {
    key: 'startSpread',
    value: function startSpread(nativeEvent, field) {
      var _this3 = this;

      var locations = nativeEvent.touches.map(function (touch) {
        return _this3.touches[touch.identifier][field];
      });
      return Math.max.apply(Math, _toConsumableArray(locations)) - Math.min.apply(Math, _toConsumableArray(locations));
    }
  }, {
    key: 'spread',
    value: function spread(nativeEvent, field) {
      var locations = nativeEvent.touches.map(function (touch) {
        return touch[field];
      });
      return Math.max.apply(Math, _toConsumableArray(locations)) - Math.min.apply(Math, _toConsumableArray(locations));
    }
  }, {
    key: 'center',
    value: function center(nativeEvent, field) {
      var totalPage = nativeEvent.touches.reduce(function (total, touch) {
        return total + touch[field];
      }, 0);
      return totalPage / nativeEvent.touches.length;
    }
  }, {
    key: 'reuseIdentityMatrix',
    value: function reuseIdentityMatrix(matrixCommand) {
      matrixCommand[0] = 1;
      matrixCommand[1] = 0;
      matrixCommand[2] = 0;
      matrixCommand[3] = 0;

      matrixCommand[4] = 0;
      matrixCommand[5] = 1;
      matrixCommand[6] = 0;
      matrixCommand[7] = 0;

      matrixCommand[8] = 0;
      matrixCommand[9] = 0;
      matrixCommand[10] = 1;
      matrixCommand[11] = 0;

      matrixCommand[12] = 0;
      matrixCommand[13] = 0;
      matrixCommand[14] = 0;
      matrixCommand[15] = 1;
    }
  }]);

  return PinchZoomResponder;
}();